{
  "language": "Solidity",
  "sources": {
    "SeersLeague.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n/**\n * @title SeersLeague\n * @notice Daily football prediction competition with free trial\n * @dev First 5 predictions free, then $1 USDC per day\n */\ncontract SeersLeague is Ownable, Pausable, ReentrancyGuard {\n    // Base Mainnet USDC\n    IERC20 public constant USDC = IERC20(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913);\n    \n    // Entry fee: $1 USDC (6 decimals)\n    uint256 public constant ENTRY_FEE = 1_000_000; // 1 USDC\n    \n    // Treasury address for collected fees\n    address public treasury;\n    \n    struct Prediction {\n        uint32 matchId;\n        uint8 outcome;        // 1=Home, 2=Draw, 3=Away\n        uint32 timestamp;\n    }\n    \n    struct UserStats {\n        uint16 correctPredictions;\n        uint16 totalPredictions;\n        uint16 currentStreak;\n        uint16 longestStreak;\n        uint32 lastPredictionDate;     // YYYYMMDD format\n        bool hasUsedFreeTrial;         // Track if user used free 5 predictions\n    }\n    \n    struct DailyPool {\n        uint256 totalFees;\n        uint256 participantCount;\n        bool distributed;\n    }\n    \n    // Mappings\n    mapping(address => UserStats) public userStats;\n    mapping(address => mapping(uint32 => Prediction)) public predictions;\n    mapping(uint32 => DailyPool) public dailyPools;  // date => pool info\n    \n    // Events\n    event PredictionsSubmitted(\n        address indexed user, \n        uint32[] matchIds, \n        bool freeTrial,\n        uint256 feePaid\n    );\n    \n    event ResultRecorded(\n        address indexed user, \n        uint32 matchId, \n        bool correct\n    );\n    \n    event PrizesDistributed(\n        uint32 indexed date,\n        uint256 totalAmount,\n        uint256 recipientCount\n    );\n    \n    event TreasuryUpdated(address indexed newTreasury);\n    \n    constructor(address _treasury) Ownable(msg.sender) {\n        require(_treasury != address(0), \"Invalid treasury\");\n        treasury = _treasury;\n    }\n    \n    /**\n     * @notice Submit 5 daily predictions\n     * @param matchIds Array of 5 match IDs\n     * @param outcomes Array of 5 outcomes (1/2/3)\n     * @dev First time free, subsequent days require USDC payment\n     */\n    function submitPredictions(\n        uint32[] calldata matchIds,\n        uint8[] calldata outcomes\n    ) external nonReentrant whenNotPaused {\n        require(matchIds.length == 5, \"Must predict exactly 5 matches\");\n        require(outcomes.length == 5, \"Must provide 5 outcomes\");\n        \n        UserStats storage stats = userStats[msg.sender];\n        uint32 today = _getTodayDate();\n        \n        // Check if already predicted today\n        require(stats.lastPredictionDate != today, \"Already predicted today\");\n        \n        // Handle payment\n        bool isFreeTrial = !stats.hasUsedFreeTrial;\n        \n        if (!isFreeTrial) {\n            // Collect $1 USDC entry fee\n            require(\n                USDC.transferFrom(msg.sender, treasury, ENTRY_FEE),\n                \"USDC transfer failed\"\n            );\n            \n            // Track daily pool\n            dailyPools[today].totalFees += ENTRY_FEE;\n            dailyPools[today].participantCount++;\n        } else {\n            // Mark free trial as used\n            stats.hasUsedFreeTrial = true;\n        }\n        \n        // Store predictions\n        for (uint256 i = 0; i < 5; i++) {\n            require(outcomes[i] >= 1 && outcomes[i] <= 3, \"Invalid outcome\");\n            require(\n                predictions[msg.sender][matchIds[i]].timestamp == 0,\n                \"Match already predicted\"\n            );\n            \n            predictions[msg.sender][matchIds[i]] = Prediction({\n                matchId: matchIds[i],\n                outcome: outcomes[i],\n                timestamp: uint32(block.timestamp)\n            });\n        }\n        \n        // Update user stats\n        stats.totalPredictions += 5;\n        stats.lastPredictionDate = today;\n        \n        emit PredictionsSubmitted(\n            msg.sender, \n            matchIds, \n            isFreeTrial,\n            isFreeTrial ? 0 : ENTRY_FEE\n        );\n    }\n    \n    /**\n     * @notice Record match result (owner only)\n     * @param user User address\n     * @param matchId Match ID\n     * @param correct Whether prediction was correct\n     */\n    function recordResult(\n        address user,\n        uint32 matchId,\n        bool correct\n    ) external onlyOwner {\n        require(\n            predictions[user][matchId].timestamp > 0,\n            \"No prediction found\"\n        );\n        \n        UserStats storage stats = userStats[user];\n        \n        if (correct) {\n            stats.correctPredictions++;\n            stats.currentStreak++;\n            \n            if (stats.currentStreak > stats.longestStreak) {\n                stats.longestStreak = stats.currentStreak;\n            }\n        } else {\n            stats.currentStreak = 0;\n        }\n        \n        emit ResultRecorded(user, matchId, correct);\n    }\n    \n    /**\n     * @notice Batch record results for multiple users\n     * @param users Array of user addresses\n     * @param matchIds Array of match IDs\n     * @param corrects Array of correct/incorrect flags\n     */\n    function batchRecordResults(\n        address[] calldata users,\n        uint32[] calldata matchIds,\n        bool[] calldata corrects\n    ) external onlyOwner {\n        require(\n            users.length == matchIds.length && \n            matchIds.length == corrects.length,\n            \"Length mismatch\"\n        );\n        \n        for (uint256 i = 0; i < users.length; i++) {\n            if (predictions[users[i]][matchIds[i]].timestamp > 0) {\n                UserStats storage stats = userStats[users[i]];\n                \n                if (corrects[i]) {\n                    stats.correctPredictions++;\n                    stats.currentStreak++;\n                    \n                    if (stats.currentStreak > stats.longestStreak) {\n                        stats.longestStreak = stats.currentStreak;\n                    }\n                } else {\n                    stats.currentStreak = 0;\n                }\n                \n                emit ResultRecorded(users[i], matchIds[i], corrects[i]);\n            }\n        }\n    }\n    \n    /**\n     * @notice Distribute prizes to winners (owner only)\n     * @param date Date of competition (YYYYMMDD)\n     * @param winners Array of winner addresses\n     * @param amounts Array of prize amounts\n     */\n    function distributePrizes(\n        uint32 date,\n        address[] calldata winners,\n        uint256[] calldata amounts\n    ) external onlyOwner nonReentrant {\n        require(winners.length == amounts.length, \"Length mismatch\");\n        require(!dailyPools[date].distributed, \"Already distributed\");\n        \n        uint256 totalDistribution;\n        \n        for (uint256 i = 0; i < winners.length; i++) {\n            require(\n                USDC.transferFrom(treasury, winners[i], amounts[i]),\n                \"Prize transfer failed\"\n            );\n            totalDistribution += amounts[i];\n        }\n        \n        dailyPools[date].distributed = true;\n        \n        emit PrizesDistributed(date, totalDistribution, winners.length);\n    }\n    \n    /**\n     * @notice Get user statistics\n     */\n    function getUserStats(address user) \n        external \n        view \n        returns (UserStats memory) \n    {\n        return userStats[user];\n    }\n    \n    /**\n     * @notice Get user's prediction for a match\n     */\n    function getUserPrediction(address user, uint32 matchId)\n        external\n        view\n        returns (Prediction memory)\n    {\n        return predictions[user][matchId];\n    }\n    \n    /**\n     * @notice Get daily pool information\n     */\n    function getDailyPool(uint32 date)\n        external\n        view\n        returns (DailyPool memory)\n    {\n        return dailyPools[date];\n    }\n    \n    /**\n     * @notice Calculate user's accuracy percentage\n     */\n    function getUserAccuracy(address user)\n        external\n        view\n        returns (uint256)\n    {\n        UserStats memory stats = userStats[user];\n        if (stats.totalPredictions == 0) return 0;\n        return (uint256(stats.correctPredictions) * 100) / stats.totalPredictions;\n    }\n    \n    /**\n     * @notice Update treasury address\n     */\n    function setTreasury(address _treasury) external onlyOwner {\n        require(_treasury != address(0), \"Invalid treasury\");\n        treasury = _treasury;\n        emit TreasuryUpdated(_treasury);\n    }\n    \n    /**\n     * @notice Emergency pause\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n    \n    /**\n     * @notice Unpause\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n    \n    /**\n     * @dev Get today's date in YYYYMMDD format\n     */\n    function _getTodayDate() private view returns (uint32) {\n        return uint32(block.timestamp / 86400);\n    }\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the caller is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is intended to be used by direct library like access to the\n * contract without having to use assembly, including for logging, filtering,\n * searching, sorting, pagination and so on.\n *\n * This contract is abstract and should not be instantiated directly.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * your functions to restrict their use to the owner.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is cheaper on every access, but the cost of the first access is\n    // higher.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant` function\n     * is not supported. It is possible to prevent this from happening by making\n     * the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    /**\n     * @dev Initializes the contract with `NOT_ENTERED` status.\n     */\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant` function\n     * is not supported. It is possible to prevent this from happening by making\n     * the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function reentrancyGuardEntered() public view returns (bool) {\n        return _status == ENTERED;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "viaIR": false,
    "compilationTarget": {
      "SeersLeague.sol": "SeersLeague"
    },
    "libraries": {},
    "remappings": []
  }
}
