/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SeersLeague {
  export type MatchStruct = {
    id: BigNumberish;
    startTime: BigNumberish;
    homeScore: BigNumberish;
    awayScore: BigNumberish;
    isRecorded: boolean;
    exists: boolean;
  };

  export type MatchStructOutput = [
    id: bigint,
    startTime: bigint,
    homeScore: bigint,
    awayScore: bigint,
    isRecorded: boolean,
    exists: boolean
  ] & {
    id: bigint;
    startTime: bigint;
    homeScore: bigint;
    awayScore: bigint;
    isRecorded: boolean;
    exists: boolean;
  };

  export type PredictionStruct = {
    matchId: BigNumberish;
    outcome: BigNumberish;
    timestamp: BigNumberish;
  };

  export type PredictionStructOutput = [
    matchId: bigint,
    outcome: bigint,
    timestamp: bigint
  ] & { matchId: bigint; outcome: bigint; timestamp: bigint };

  export type UserStatsStruct = {
    correctPredictions: BigNumberish;
    totalPredictions: BigNumberish;
    freePredictionsUsed: BigNumberish;
    currentStreak: BigNumberish;
    longestStreak: BigNumberish;
  };

  export type UserStatsStructOutput = [
    correctPredictions: bigint,
    totalPredictions: bigint,
    freePredictionsUsed: bigint,
    currentStreak: bigint,
    longestStreak: bigint
  ] & {
    correctPredictions: bigint;
    totalPredictions: bigint;
    freePredictionsUsed: bigint;
    currentStreak: bigint;
    longestStreak: bigint;
  };
}

export interface SeersLeagueInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PREDICTION_FEE"
      | "TOTAL_FREE_PREDICTIONS"
      | "USDC"
      | "batchRecordResults"
      | "distributePrizes"
      | "getMatch"
      | "getRemainingFreePredictions"
      | "getUserAccuracy"
      | "getUserPrediction"
      | "getUserStats"
      | "matches"
      | "owner"
      | "pause"
      | "paused"
      | "predictions"
      | "recordResult"
      | "registerMatches"
      | "renounceOwnership"
      | "setTreasury"
      | "submitPredictions"
      | "transferOwnership"
      | "treasury"
      | "unpause"
      | "userStats"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MatchRegistered"
      | "OwnershipTransferred"
      | "Paused"
      | "PredictionsSubmitted"
      | "PrizesDistributed"
      | "ResultRecorded"
      | "TreasuryUpdated"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "PREDICTION_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_FREE_PREDICTIONS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchRecordResults",
    values: [AddressLike[], BigNumberish[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "distributePrizes",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingFreePredictions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAccuracy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPrediction",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "matches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "predictions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordResult",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMatches",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitPredictions",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userStats",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "PREDICTION_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_FREE_PREDICTIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchRecordResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributePrizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingFreePredictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAccuracy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPrediction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "matches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitPredictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userStats", data: BytesLike): Result;
}

export namespace MatchRegisteredEvent {
  export type InputTuple = [matchId: BigNumberish, startTime: BigNumberish];
  export type OutputTuple = [matchId: bigint, startTime: bigint];
  export interface OutputObject {
    matchId: bigint;
    startTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PredictionsSubmittedEvent {
  export type InputTuple = [
    user: AddressLike,
    matchIds: BigNumberish[],
    predictionsCount: BigNumberish,
    freeUsed: BigNumberish,
    feePaid: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    matchIds: bigint[],
    predictionsCount: bigint,
    freeUsed: bigint,
    feePaid: bigint
  ];
  export interface OutputObject {
    user: string;
    matchIds: bigint[];
    predictionsCount: bigint;
    freeUsed: bigint;
    feePaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrizesDistributedEvent {
  export type InputTuple = [
    winners: AddressLike[],
    totalAmount: BigNumberish,
    recipientCount: BigNumberish
  ];
  export type OutputTuple = [
    winners: string[],
    totalAmount: bigint,
    recipientCount: bigint
  ];
  export interface OutputObject {
    winners: string[];
    totalAmount: bigint;
    recipientCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResultRecordedEvent {
  export type InputTuple = [
    user: AddressLike,
    matchId: BigNumberish,
    correct: boolean
  ];
  export type OutputTuple = [user: string, matchId: bigint, correct: boolean];
  export interface OutputObject {
    user: string;
    matchId: bigint;
    correct: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryUpdatedEvent {
  export type InputTuple = [newTreasury: AddressLike];
  export type OutputTuple = [newTreasury: string];
  export interface OutputObject {
    newTreasury: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SeersLeague extends BaseContract {
  connect(runner?: ContractRunner | null): SeersLeague;
  waitForDeployment(): Promise<this>;

  interface: SeersLeagueInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PREDICTION_FEE: TypedContractMethod<[], [bigint], "view">;

  TOTAL_FREE_PREDICTIONS: TypedContractMethod<[], [bigint], "view">;

  USDC: TypedContractMethod<[], [string], "view">;

  batchRecordResults: TypedContractMethod<
    [users: AddressLike[], matchIds: BigNumberish[], corrects: boolean[]],
    [void],
    "nonpayable"
  >;

  distributePrizes: TypedContractMethod<
    [winners: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getMatch: TypedContractMethod<
    [matchId: BigNumberish],
    [SeersLeague.MatchStructOutput],
    "view"
  >;

  getRemainingFreePredictions: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserAccuracy: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getUserPrediction: TypedContractMethod<
    [user: AddressLike, matchId: BigNumberish],
    [SeersLeague.PredictionStructOutput],
    "view"
  >;

  getUserStats: TypedContractMethod<
    [user: AddressLike],
    [SeersLeague.UserStatsStructOutput],
    "view"
  >;

  matches: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean, boolean] & {
        id: bigint;
        startTime: bigint;
        homeScore: bigint;
        awayScore: bigint;
        isRecorded: boolean;
        exists: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  predictions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        matchId: bigint;
        outcome: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  recordResult: TypedContractMethod<
    [user: AddressLike, matchId: BigNumberish, correct: boolean],
    [void],
    "nonpayable"
  >;

  registerMatches: TypedContractMethod<
    [matchIds: BigNumberish[], startTimes: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setTreasury: TypedContractMethod<
    [_treasury: AddressLike],
    [void],
    "nonpayable"
  >;

  submitPredictions: TypedContractMethod<
    [matchIds: BigNumberish[], outcomes: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  userStats: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        correctPredictions: bigint;
        totalPredictions: bigint;
        freePredictionsUsed: bigint;
        currentStreak: bigint;
        longestStreak: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PREDICTION_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOTAL_FREE_PREDICTIONS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "USDC"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "batchRecordResults"
  ): TypedContractMethod<
    [users: AddressLike[], matchIds: BigNumberish[], corrects: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributePrizes"
  ): TypedContractMethod<
    [winners: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getMatch"
  ): TypedContractMethod<
    [matchId: BigNumberish],
    [SeersLeague.MatchStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRemainingFreePredictions"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserAccuracy"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserPrediction"
  ): TypedContractMethod<
    [user: AddressLike, matchId: BigNumberish],
    [SeersLeague.PredictionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserStats"
  ): TypedContractMethod<
    [user: AddressLike],
    [SeersLeague.UserStatsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "matches"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean, boolean] & {
        id: bigint;
        startTime: bigint;
        homeScore: bigint;
        awayScore: bigint;
        isRecorded: boolean;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "predictions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        matchId: bigint;
        outcome: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "recordResult"
  ): TypedContractMethod<
    [user: AddressLike, matchId: BigNumberish, correct: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerMatches"
  ): TypedContractMethod<
    [matchIds: BigNumberish[], startTimes: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[_treasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitPredictions"
  ): TypedContractMethod<
    [matchIds: BigNumberish[], outcomes: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userStats"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        correctPredictions: bigint;
        totalPredictions: bigint;
        freePredictionsUsed: bigint;
        currentStreak: bigint;
        longestStreak: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "MatchRegistered"
  ): TypedContractEvent<
    MatchRegisteredEvent.InputTuple,
    MatchRegisteredEvent.OutputTuple,
    MatchRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PredictionsSubmitted"
  ): TypedContractEvent<
    PredictionsSubmittedEvent.InputTuple,
    PredictionsSubmittedEvent.OutputTuple,
    PredictionsSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "PrizesDistributed"
  ): TypedContractEvent<
    PrizesDistributedEvent.InputTuple,
    PrizesDistributedEvent.OutputTuple,
    PrizesDistributedEvent.OutputObject
  >;
  getEvent(
    key: "ResultRecorded"
  ): TypedContractEvent<
    ResultRecordedEvent.InputTuple,
    ResultRecordedEvent.OutputTuple,
    ResultRecordedEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryUpdated"
  ): TypedContractEvent<
    TreasuryUpdatedEvent.InputTuple,
    TreasuryUpdatedEvent.OutputTuple,
    TreasuryUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "MatchRegistered(uint256,uint256)": TypedContractEvent<
      MatchRegisteredEvent.InputTuple,
      MatchRegisteredEvent.OutputTuple,
      MatchRegisteredEvent.OutputObject
    >;
    MatchRegistered: TypedContractEvent<
      MatchRegisteredEvent.InputTuple,
      MatchRegisteredEvent.OutputTuple,
      MatchRegisteredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PredictionsSubmitted(address,uint256[],uint256,uint256,uint256)": TypedContractEvent<
      PredictionsSubmittedEvent.InputTuple,
      PredictionsSubmittedEvent.OutputTuple,
      PredictionsSubmittedEvent.OutputObject
    >;
    PredictionsSubmitted: TypedContractEvent<
      PredictionsSubmittedEvent.InputTuple,
      PredictionsSubmittedEvent.OutputTuple,
      PredictionsSubmittedEvent.OutputObject
    >;

    "PrizesDistributed(address[],uint256,uint256)": TypedContractEvent<
      PrizesDistributedEvent.InputTuple,
      PrizesDistributedEvent.OutputTuple,
      PrizesDistributedEvent.OutputObject
    >;
    PrizesDistributed: TypedContractEvent<
      PrizesDistributedEvent.InputTuple,
      PrizesDistributedEvent.OutputTuple,
      PrizesDistributedEvent.OutputObject
    >;

    "ResultRecorded(address,uint256,bool)": TypedContractEvent<
      ResultRecordedEvent.InputTuple,
      ResultRecordedEvent.OutputTuple,
      ResultRecordedEvent.OutputObject
    >;
    ResultRecorded: TypedContractEvent<
      ResultRecordedEvent.InputTuple,
      ResultRecordedEvent.OutputTuple,
      ResultRecordedEvent.OutputObject
    >;

    "TreasuryUpdated(address)": TypedContractEvent<
      TreasuryUpdatedEvent.InputTuple,
      TreasuryUpdatedEvent.OutputTuple,
      TreasuryUpdatedEvent.OutputObject
    >;
    TreasuryUpdated: TypedContractEvent<
      TreasuryUpdatedEvent.InputTuple,
      TreasuryUpdatedEvent.OutputTuple,
      TreasuryUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
